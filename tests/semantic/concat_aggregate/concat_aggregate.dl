
.decl f(i:number, s:symbol)
f(3, "three").
f(2, "two").
f(1, "one").

.decl A(c:symbol)
.output A()
// concat with order-by and separator
A(c) :-
  c = concat cat(s,":",to_string(i)),"|" : {f(i,s)} orderby (i).

.decl B(c:symbol)
.output B()
// concat with order-by without separator
B(c) :-
  c = concat cat(s,":",to_string(i)) : {f(i,s)} orderby (i).

.decl revA(c:symbol)
.output revA()
revA(c) :-
  c = concat cat(s,":",to_string(i)),"|" : {f(i,s)} orderby (-i).

.decl empty(c:symbol)
.output empty()
// concat holds and return the empty string if the filter expression never holds
empty(cat(">", c)) :- c = concat s : {f(i,s), i < 0}.

.decl strict_empty(c:symbol)
.output strict_empty()
// strictconcat does not hold if the filter expression never holds
strict_empty(cat(">", c)) :- c = strictconcat s : {f(i,s), i < 0}.

